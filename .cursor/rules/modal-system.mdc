---
alwaysApply: true
description: モーダルUI実装時の再利用ルール
---

# モーダルシステム再利用ルール

## 基本原則
- **新しいモーダルを作成する際は、必ず既存の `src/web/ui/Modal.ts` の `openChoiceModal` を流用する**
- 独自のモーダル実装は禁止
- 既存システムの拡張が必要な場合は、まず `Modal.ts` を拡張することを検討

## 既存システムの使用方法

### 1. 基本API
```typescript
import { openChoiceModal } from '../ui/Modal';

// 選択肢付きモーダル
const result = await openChoiceModal({
  title: '確認',
  options: [
    { id: 'yes', label: 'はい' },
    { id: 'no', label: 'いいえ' }
  ],
  defaultIndex: 0
});

if (result.type === 'ok') {
  // result.selectedId で選択されたIDを取得
  handleSelection(result.selectedId);
}
```

### 2. 利用可能な選択肢パターン
- **確認系**: `[{ id: 'yes', label: 'はい' }, { id: 'no', label: 'いいえ' }]`
- **選択系**: `[{ id: 'item1', label: 'アイテム1' }, { id: 'item2', label: 'アイテム2' }]`
- **メニュー系**: `[{ id: 'attack', label: '攻撃' }, { id: 'defend', label: '防御' }]`

## 実装時の注意点

### キー操作
- 左右キー: 選択移動
- Zキー: 決定
- Xキー: キャンセル
- これらの操作は既に実装済み

### 状態管理
- `isModalOpen()` でモーダル表示中かチェック
- モーダル表示中はゲーム側のキー入力を無効化
- 単一インスタンス管理（同時に1つだけ表示可能）

## 拡張が必要な場合

### 1. 新しいモーダルタイプ
```typescript
// Modal.ts に新しい関数を追加
export function openInputModal(params: {
  title: string;
  placeholder: string;
  defaultValue?: string;
}): Promise<{ type: 'ok'; value: string } | { type: 'cancel' }> {
  // 実装
}
```

### 2. 既存関数の拡張
```typescript
// パラメータを追加
export function openChoiceModal(params: {
  title: string;
  options: Choice[];
  defaultIndex?: number;
  allowCancel?: boolean; // 新パラメータ
}): Promise<ChoiceResult> {
  // 実装
}
```

## 禁止事項
- `document.createElement` による独自モーダル作成
- 既存システムを無視したキー操作の実装
- モーダル状態の重複管理
- ゲーム側でのモーダル表示ロジックの実装

## 参考ファイル
- [src/web/ui/Modal.ts](mdc:src/web/ui/Modal.ts) - モーダルシステムの実装
- [src/web/main.ts](mdc:src/web/main.ts) - 使用例（階段確認モーダル）
